name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
      continue-on-error: true
          
    - name: Clean and download dependencies
      run: |
        # Clean module cache if there are issues
        go clean -modcache || true
        
        # Download dependencies with proper error handling
        if ! go mod download; then
          echo "Error: Failed to download Go modules"
          echo "Attempting to clean and retry..."
          go clean -modcache
          go mod download
        fi
        
        # Verify modules are properly downloaded
        go mod verify
      
    - name: Run tests
      run: go test -v ./...
      
    - name: Run go vet
      run: go vet ./...
      
    - name: Check formatting
      run: |
        UNFORMATTED=$(gofmt -s -l .)
        if [ -n "$UNFORMATTED" ]; then
          echo "⚠️  The following files are not formatted properly:"
          echo "$UNFORMATTED"
          echo ""
          echo "💡 To fix, run: gofmt -s -w ."
          echo ""
          echo "🔧 Showing formatting differences:"
          gofmt -s -d .
          exit 1
        else
          echo "✅ All files are properly formatted"
        fi
        
    - name: Build
      run: go build ./...
      
  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Bump version and create tag
      id: tag_version
      uses: anothrNick/github-tag-action@1.70.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true
        DEFAULT_BUMP: patch
        RELEASE_BRANCHES: main
        TAG_CONTEXT: branch
        DRY_RUN: false
        PRERELEASE: false
        VERBOSE: true
        INITIAL_VERSION: 1.0.0
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      if: steps.tag_version.outputs.new_tag != ''
      with:
        tag_name: ${{ steps.tag_version.outputs.new_tag }}
        name: Release ${{ steps.tag_version.outputs.new_tag }}
        generate_release_notes: true
        body: |
          ## Release ${{ steps.tag_version.outputs.new_tag }}
          
          ### Installation
          ```go
          go get github.com/ternarybob/satus@${{ steps.tag_version.outputs.new_tag }}
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update config.yml with new version
      run: |
        # Get the latest tag (which was just created)
        NEW_TAG=$(git tag --sort=-version:refname | head -1)
        NEW_VERSION="${NEW_TAG#v}"
        
        echo "Updating config.yml to version: $NEW_VERSION"
        
        # Update config.yml
        if ! sed -i "s/^  version: \".*\"/  version: \"$NEW_VERSION\"/" config.yml; then
          echo "Error: Failed to update config.yml"
          exit 1
        fi
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are changes to commit
        if git diff --quiet config.yml; then
          echo "No changes to config.yml - version already up to date"
          exit 0
        fi
        
        # Commit the config update
        git add config.yml
        if ! git commit -m "Update config.yml to version $NEW_VERSION [skip ci]"; then
          echo "Error: Failed to commit config.yml changes"
          exit 1
        fi
        
        # Push changes
        if ! git push origin main; then
          echo "Error: Failed to push config.yml changes"
          exit 1
        fi
        
        echo "Successfully updated config.yml to version $NEW_VERSION"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      security-events: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Extract tag info
      id: tag_info
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "version=$TAG" >> $GITHUB_OUTPUT
        
    - name: Generate changelog
      id: changelog
      run: |
        echo "## Changes in ${{ steps.tag_info.outputs.version }}" > CHANGELOG.tmp
        echo "" >> CHANGELOG.tmp
        
        # Get commits since last tag
        LAST_TAG=$(git tag --sort=-version:refname | head -2 | tail -1)
        if [ -z "$LAST_TAG" ]; then
          LAST_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        
        git log --oneline --pretty=format:"- %s" $LAST_TAG..HEAD >> CHANGELOG.tmp
        
        {
          echo 'changelog<<EOF'
          cat CHANGELOG.tmp
          echo EOF
        } >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create ${{ steps.tag_info.outputs.tag }} \
          --title "${{ steps.tag_info.outputs.version }}" \
          --notes "${{ steps.changelog.outputs.changelog }}" \
          ${{ contains(steps.tag_info.outputs.version, '-') && '--prerelease' || '' }}
